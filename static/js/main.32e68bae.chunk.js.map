{"version":3,"sources":["components/CustomAppBar.js","components/CustomSnackbar.js","App.js","reportWebVitals.js","index.js"],"names":["CustomAppBar","AppBar","position","Toolbar","Typography","variant","Alert","props","elevation","useStyles","makeStyles","theme","root","width","marginTop","spacing","CustomSnackbar","message","type","classes","useState","open","setOpen","handleClose","event","reason","className","Snackbar","autoHideDuration","onClose","severity","flexGrow","title","App","url","setURL","connected","setConnected","showMessage","msg","ReactDOM","render","document","getElementById","ros","ROSLIB","Ros","on","Card","CardContent","TextField","label","value","onChange","target","CardActions","Button","onClick","connect","err","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"4PAmBeA,MAdf,WACE,OACE,8BACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAApB,+B,0BCLV,SAASC,EAAMC,GACb,OAAO,cAAC,IAAD,aAAUC,UAAW,EAAGH,QAAQ,UAAaE,IAGtD,IAAME,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,MAAO,OACP,YAAa,CACXC,UAAWH,EAAMI,QAAQ,SA4BhBC,EAvBQ,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,KAC1BC,EAAUV,IAD0B,EAElBW,oBAAS,GAFS,mBAEnCC,EAFmC,KAE7BC,EAF6B,KAIpCC,EAAc,SAACC,EAAOC,GACX,cAAXA,GAIJH,GAAQ,IAGV,OACE,qBAAKI,UAAWP,EAAQP,KAAxB,SACE,cAACe,EAAA,EAAD,CAAUN,KAAMA,EAAMO,iBAAkB,IAAMC,QAASN,EAAvD,SACE,cAAC,EAAD,CAAOM,QAAoB,YAATX,EAAsBK,EAAc,GAAIO,SAAUZ,EAApE,SACGD,S,iBCnBLR,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJmB,SAAU,GAEZC,MAAO,CACLD,SAAU,OA0DCE,MAtDf,WACE,IAAMd,EAAUV,IADH,EAESW,mBAAS,uBAFlB,mBAENc,EAFM,KAEDC,EAFC,OAGqBf,oBAAS,GAH9B,mBAGNgB,EAHM,KAGKC,EAHL,KAIPC,EAAc,SAACC,EAAKrB,GACxBsB,IAASC,OAAO,cAAC,EAAD,CAAUvB,KAAMA,EAAMD,QAASsB,IAAQG,SAASC,eAAe,cAG3EC,EAAM,IAAIC,IAAOC,IA8BvB,OA5BAF,EAAIG,GAAG,cAAc,WACnBV,GAAa,GACbC,EAAY,YAAa,cAG3BM,EAAIG,GAAG,SAAS,WACdV,GAAa,GACbC,EAAY,QAAS,YAGvBM,EAAIG,GAAG,SAAS,WACdV,GAAa,GACbC,EAAY,QAAS,cAiBrB,sBAAKZ,UAAWP,EAAQP,KAAxB,UACE,cAAC,EAAD,IACA,eAACoC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACMb,EAA4G,GAA9F,cAACc,EAAA,EAAD,CAAWC,MAAM,gBAAgB9C,QAAQ,SAAS+C,MAAOlB,EAAKmB,SAThE,SAAA7B,GACtBW,EAAOX,EAAM8B,OAAOF,YAUhB,eAACG,EAAA,EAAD,WACMnB,EAAmF,GAAtE,cAACoB,EAAA,EAAD,CAAQnD,QAAQ,WAAWoD,QArB9B,WACpB,IACEb,EAAIc,QAAQxB,GAEd,MAAOyB,GACLrB,EAAY,gBAAiB,UAgBR,qBACjB,qBAAKsB,GAAG,uBC3DHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdtB,IAASC,OACP,cAAC,IAAM6B,WAAP,UACE,cAAC,EAAD,MAEF5B,SAASC,eAAe,SAM1BkB,M","file":"static/js/main.32e68bae.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nfunction CustomAppBar() {\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">\n            Shisen App\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default CustomAppBar;","import React, { useState} from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nconst CustomSnackbar = ({message, type}) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(true);\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={ (type === 'success') ? handleClose : ''} severity={type}>\n          {message}\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n}\n\nexport default CustomSnackbar;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField';\n\nimport AppBar from './components/CustomAppBar';\nimport Snackbar from './components/CustomSnackbar';\n\nimport ROSLIB from 'roslib';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [url, setURL] = useState('ws://localhost:9090');\n  const [connected, setConnected] = useState(false);\n  const showMessage = (msg, type) => {\n    ReactDOM.render(<Snackbar type={type} message={msg}/>, document.getElementById('snackbar'));\n  }\n\n  const ros = new ROSLIB.Ros();\n\n  ros.on('connection', () => {\n    setConnected(true);\n    showMessage(\"Connected\", \"success\");\n  });\n  \n  ros.on('error', () => {\n    setConnected(false);\n    showMessage(\"Error\", \"error\");\n  });\n  \n  ros.on('close', () => {\n    setConnected(false);\n    showMessage(\"Close\", \"warning\");\n  });\n\n  const handleConnect = () => {\n    try {\n      ros.connect(url);\n    }\n    catch (err) {\n      showMessage(\"URL not valid\", \"info\");\n    }\n  };\n\n  const onChangeHandler = event => {\n    setURL(event.target.value);\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar></AppBar>\n      <Card>\n        <CardContent>\n          { (!connected)  ? <TextField label=\"URL WebSocket\" variant=\"filled\" value={url} onChange={onChangeHandler} /> : ''}\n        </CardContent>\n        <CardActions>\n          { (!connected) ? <Button variant=\"outlined\" onClick={handleConnect}>Connect</Button> : ''} \n          <div id=\"snackbar\"/>\n        </CardActions>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}